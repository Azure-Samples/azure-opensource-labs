{
  "$schema": "https://schema.management.azure.com/schemas/2019-04-01/deploymentTemplate.json#",
  "contentVersion": "1.0.0.0",
  "metadata": {
    "_generator": {
      "name": "bicep",
      "version": "0.6.18.56646",
      "templateHash": "8944652965127195125"
    }
  },
  "parameters": {
    "vmssName": {
      "type": "string",
      "defaultValue": "vmss1",
      "metadata": {
        "description": "Name for the Virtual Machine, also used as prefix for various resources."
      }
    },
    "adminUsername": {
      "type": "string",
      "defaultValue": "azureuser",
      "metadata": {
        "description": "User name for the Virtual Machine."
      }
    },
    "authenticationType": {
      "type": "string",
      "defaultValue": "sshPublicKey",
      "allowedValues": [
        "sshPublicKey",
        "password"
      ],
      "metadata": {
        "description": "Type of authentication to use on the Virtual Machine. SSH key is recommended."
      }
    },
    "adminPasswordOrKey": {
      "type": "secureString",
      "defaultValue": "ssh-rsa AAAAB3NzaC1yc2EAAAADAQABAAABAQC3gkRpKwprN00sT7yekr0xO0F+uTllDua02puhu1v0zGu3aENvUsygBHJiTy+flgrO2q3mY9F5/D67+WHDeSpr5s71UtnbzMxTams89qmo+raTm+IqjzdNujaWf0/pbT6JUkQq0fR0BfIvg3/7NTXhlzjmCOP2EpD91LzN6b5jAm/5hXr0V5mcpERo8kk2GWxjKmwmDOV+huH1DIFDpMxT3WzR2qvZp1DZbNSYmKkrite3FHlPGLXA1I3bRQT+iTj8vRGpxOPSiMdPK4RNMEZVXSGQ3OZbSl2FBCbd/tdJ1idKo8/ZCkHxdh9/em28/yfPUK0D164shgiEdIkdOQJv",
      "metadata": {
        "description": "SSH Key or password for the Virtual Machine. SSH key is recommended."
      }
    },
    "allowIpPort22": {
      "type": "string",
      "defaultValue": "127.0.0.1",
      "metadata": {
        "description": "Default IP to allow Port 22 (SSH). Set to your own IP Address"
      }
    },
    "dnsPrefix": {
      "type": "string",
      "defaultValue": "",
      "metadata": {
        "description": "Unique DNS Name for the Public IP used to access the Virtual Machine."
      }
    },
    "vmSize": {
      "type": "string",
      "defaultValue": "Standard_D2ds_v4",
      "allowedValues": [
        "Standard_B1ls",
        "Standard_B1s",
        "Standard_B1ms",
        "Standard_B2s",
        "Standard_F1s",
        "Standard_DS1_v2",
        "Standard_B2ms",
        "Standard_F2s_v2",
        "Standard_D2s_v3",
        "Standard_D2ds_v4",
        "Standard_F2s",
        "Standard_E2s_v3",
        "Standard_DS2_v2",
        "Standard_DS3_v2",
        "Standard_DS4_v2",
        "Standard_B4ms"
      ],
      "metadata": {
        "description": "The Virtual Machine size."
      }
    },
    "osDiskSize": {
      "type": "int",
      "defaultValue": 1024,
      "allowedValues": [
        1024,
        512,
        256,
        128,
        64,
        32
      ],
      "metadata": {
        "description": "The OS Disk size."
      }
    },
    "dataDiskSize": {
      "type": "int",
      "defaultValue": 0,
      "allowedValues": [
        1024,
        512,
        256,
        128,
        0
      ],
      "metadata": {
        "description": "The Data Disk size."
      }
    },
    "diskAccountType": {
      "type": "string",
      "defaultValue": "Premium_LRS",
      "allowedValues": [
        "Premium_LRS",
        "UltraSSD_LRS"
      ],
      "metadata": {
        "description": "The Storage Account Type for OS and Data disks."
      }
    },
    "osPublisher": {
      "type": "string",
      "defaultValue": "Canonical",
      "allowedValues": [
        "Canonical",
        "MicrosoftWindowsDesktop"
      ],
      "metadata": {
        "description": "The OS version for the VM."
      }
    },
    "osOffer": {
      "type": "string",
      "defaultValue": "UbuntuServer",
      "allowedValues": [
        "UbuntuServer",
        "Windows-10"
      ],
      "metadata": {
        "description": "The OS offer for the VM."
      }
    },
    "osSku": {
      "type": "string",
      "defaultValue": "18.04-LTS",
      "allowedValues": [
        "18.04-LTS",
        "16.04.0-LTS",
        "19h1-pro"
      ],
      "metadata": {
        "description": "The OS sku for the VM."
      }
    },
    "location": {
      "type": "string",
      "defaultValue": "[resourceGroup().location]",
      "metadata": {
        "description": "Location for all resources."
      }
    },
    "customDataUrl": {
      "type": "string",
      "defaultValue": "",
      "metadata": {
        "description": "URL to cloud-init script"
      }
    },
    "env": {
      "type": "object",
      "defaultValue": {},
      "metadata": {
        "description": "Environment variables as JSON object"
      }
    },
    "instanceCount": {
      "type": "int",
      "defaultValue": 1,
      "maxValue": 1000,
      "metadata": {
        "description": "Number of VM instances (1000 or less)."
      }
    },
    "vmssTier": {
      "type": "string",
      "defaultValue": "Standard",
      "allowedValues": [
        "Standard",
        "Basic"
      ],
      "metadata": {
        "description": "Tier"
      }
    },
    "vmssPriority": {
      "type": "string",
      "defaultValue": "Regular",
      "allowedValues": [
        "Regular",
        "Low",
        "Spot"
      ],
      "metadata": {
        "description": "Priority"
      }
    },
    "vmssEvictionPolicy": {
      "type": "string",
      "defaultValue": "Deallocate",
      "allowedValues": [
        "Deallocate",
        "Delete"
      ],
      "metadata": {
        "description": "Eviction Policy"
      }
    }
  },
  "variables": {
    "env_var": "[parameters('env')]",
    "customDataUrl_var": "[parameters('customDataUrl')]",
    "customDataAdvanced": "[base64(format('#cloud-config\n# vim: syntax=yaml\n\npackages:\n- docker.io\n- jq\n\n# create the docker group\ngroups:\n  - docker\n\n# Add default auto created user to docker group\nsystem_info:\n  default_user:\n    groups: [docker]\n\nwrite_files:\n\n- encoding: b64\n  content: {0}\n  path: /home/azureuser/env.json\n\nruncmd:\n- cd /home/azureuser/\n- $( cat env.json | jq -r ''keys[] as $k | \"export \\($k)=\\(.[$k])\"'' )\n- curl -L -o cloud-init.sh ''{1}''\n- bash cloud-init.sh 2>&1 | tee cloud-init.log\n', base64(string(variables('env_var'))), variables('customDataUrl_var')))]",
    "customData": "[base64(format('#include\n{0}', parameters('customDataUrl')))]",
    "addressPrefix": "10.0.0.0/16",
    "bePoolName": "[format('{0}-bepool', parameters('vmssName'))]",
    "dnsPrefix_var": "[if(equals(parameters('dnsPrefix'), ''), format('{0}-{1}', parameters('vmssName'), uniqueString(resourceGroup().id)), parameters('dnsPrefix'))]",
    "frontEndIPConfigID": "[resourceId('Microsoft.Network/loadBalancers/frontendIpConfigurations', variables('loadBalancerName'), 'LoadBalancerFrontend')]",
    "identityName_var": "[format('{0}-identity', resourceGroup().name)]",
    "imageOffer": "[parameters('osOffer')]",
    "imagePublisher": "[parameters('osPublisher')]",
    "imageSku": "[parameters('osSku')]",
    "ipConfigName": "[format('{0}-ipconfig', parameters('vmssName'))]",
    "loadBalancerName": "[format('{0}-lb', parameters('vmssName'))]",
    "natBackendPort": 22,
    "natEndPort": 50119,
    "natPoolName": "[format('{0}-natpool', parameters('vmssName'))]",
    "natStartPort": 50000,
    "nicName": "[format('{0}-nic', parameters('vmssName'))]",
    "publicIPAddressID": "[resourceId('Microsoft.Network/publicIPAddresses', variables('publicIPAddressName_var'))]",
    "publicIPAddressName_var": "[format('{0}-ip', parameters('vmssName'))]",
    "publicIPAddressType": "Static",
    "subnetName": "default",
    "subnetPrefix": "10.0.0.0/24",
    "virtualNetworkName_var": "[format('{0}-vnet', resourceGroup().name)]",
    "nsgName_var": "[format('{0}-nsg', resourceGroup().name)]",
    "vmssName_var": "[parameters('vmssName')]"
  },
  "resources": [
    {
      "type": "Microsoft.ManagedIdentity/userAssignedIdentities",
      "apiVersion": "2018-11-30",
      "name": "[variables('identityName_var')]",
      "location": "[parameters('location')]"
    },
    {
      "type": "Microsoft.Network/publicIPAddresses",
      "apiVersion": "2020-05-01",
      "name": "[variables('publicIPAddressName_var')]",
      "location": "[parameters('location')]",
      "sku": {
        "name": "Standard"
      },
      "properties": {
        "publicIPAllocationMethod": "[variables('publicIPAddressType')]",
        "dnsSettings": {
          "domainNameLabel": "[variables('dnsPrefix_var')]"
        }
      }
    },
    {
      "type": "Microsoft.Network/virtualNetworks",
      "apiVersion": "2018-11-01",
      "name": "[variables('virtualNetworkName_var')]",
      "location": "[parameters('location')]",
      "properties": {
        "addressSpace": {
          "addressPrefixes": [
            "[variables('addressPrefix')]"
          ]
        },
        "subnets": [
          {
            "name": "[variables('subnetName')]",
            "properties": {
              "addressPrefix": "[variables('subnetPrefix')]",
              "networkSecurityGroup": {
                "id": "[resourceId('Microsoft.Network/networkSecurityGroups', variables('nsgName_var'))]"
              }
            }
          }
        ]
      },
      "dependsOn": [
        "[resourceId('Microsoft.Network/networkSecurityGroups', variables('nsgName_var'))]"
      ]
    },
    {
      "type": "Microsoft.Network/networkSecurityGroups",
      "apiVersion": "2018-12-01",
      "name": "[variables('nsgName_var')]",
      "location": "[parameters('location')]",
      "properties": {
        "securityRules": [
          {
            "name": "Port_22",
            "properties": {
              "protocol": "*",
              "sourcePortRange": "*",
              "destinationPortRange": "22",
              "sourceAddressPrefix": "[parameters('allowIpPort22')]",
              "destinationAddressPrefix": "*",
              "access": "Allow",
              "priority": 100,
              "direction": "Inbound"
            }
          },
          {
            "name": "Port_80",
            "properties": {
              "protocol": "*",
              "sourcePortRange": "*",
              "destinationPortRange": "80",
              "sourceAddressPrefix": "Internet",
              "destinationAddressPrefix": "*",
              "access": "Allow",
              "priority": 110,
              "direction": "Inbound"
            }
          },
          {
            "name": "Port_443",
            "properties": {
              "protocol": "*",
              "sourcePortRange": "*",
              "destinationPortRange": "443",
              "sourceAddressPrefix": "Internet",
              "destinationAddressPrefix": "*",
              "access": "Allow",
              "priority": 120,
              "direction": "Inbound"
            }
          },
          {
            "name": "Port_8080",
            "properties": {
              "protocol": "*",
              "sourcePortRange": "*",
              "destinationPortRange": "8080",
              "sourceAddressPrefix": "Internet",
              "destinationAddressPrefix": "*",
              "access": "Allow",
              "priority": 130,
              "direction": "Inbound"
            }
          }
        ]
      }
    },
    {
      "type": "Microsoft.Network/loadBalancers",
      "apiVersion": "2020-05-01",
      "name": "[variables('loadBalancerName')]",
      "location": "[parameters('location')]",
      "sku": {
        "name": "Standard"
      },
      "properties": {
        "frontendIPConfigurations": [
          {
            "name": "LoadBalancerFrontEnd",
            "properties": {
              "publicIPAddress": {
                "id": "[variables('publicIPAddressID')]"
              }
            }
          }
        ],
        "backendAddressPools": [
          {
            "name": "[variables('bePoolName')]"
          }
        ],
        "inboundNatPools": [
          {
            "name": "[variables('natPoolName')]",
            "properties": {
              "frontendIPConfiguration": {
                "id": "[variables('frontEndIPConfigID')]"
              },
              "protocol": "Tcp",
              "frontendPortRangeStart": "[variables('natStartPort')]",
              "frontendPortRangeEnd": "[variables('natEndPort')]",
              "backendPort": "[variables('natBackendPort')]"
            }
          }
        ],
        "loadBalancingRules": [
          {
            "name": "Rule_80",
            "properties": {
              "loadDistribution": "Default",
              "frontendIPConfiguration": {
                "id": "[variables('frontEndIPConfigID')]"
              },
              "backendAddressPool": {
                "id": "[format('/subscriptions/{0}/resourceGroups/{1}/providers/Microsoft.Network/loadBalancers/{2}/backendAddressPools/{3}', subscription().subscriptionId, resourceGroup().name, variables('loadBalancerName'), variables('bePoolName'))]"
              },
              "protocol": "Tcp",
              "frontendPort": 80,
              "backendPort": 80,
              "enableFloatingIP": false,
              "idleTimeoutInMinutes": 5,
              "probe": {
                "id": "[resourceId('Microsoft.Network/loadBalancers/probes', variables('loadBalancerName'), 'Probe_80')]"
              }
            }
          },
          {
            "name": "Rule_443",
            "properties": {
              "loadDistribution": "Default",
              "frontendIPConfiguration": {
                "id": "[variables('frontEndIPConfigID')]"
              },
              "backendAddressPool": {
                "id": "[format('/subscriptions/{0}/resourceGroups/{1}/providers/Microsoft.Network/loadBalancers/{2}/backendAddressPools/{3}', subscription().subscriptionId, resourceGroup().name, variables('loadBalancerName'), variables('bePoolName'))]"
              },
              "protocol": "Tcp",
              "frontendPort": 443,
              "backendPort": 443,
              "enableFloatingIP": false,
              "idleTimeoutInMinutes": 5,
              "probe": {
                "id": "[resourceId('Microsoft.Network/loadBalancers/probes', variables('loadBalancerName'), 'Probe_443')]"
              }
            }
          }
        ],
        "probes": [
          {
            "name": "Probe_80",
            "properties": {
              "protocol": "Tcp",
              "port": 80,
              "intervalInSeconds": 5,
              "numberOfProbes": 2
            }
          },
          {
            "name": "Probe_443",
            "properties": {
              "protocol": "Tcp",
              "port": 443,
              "intervalInSeconds": 5,
              "numberOfProbes": 2
            }
          }
        ]
      },
      "dependsOn": [
        "[resourceId('Microsoft.Network/publicIPAddresses', variables('publicIPAddressName_var'))]"
      ]
    },
    {
      "type": "Microsoft.Compute/virtualMachineScaleSets",
      "apiVersion": "2019-12-01",
      "name": "[variables('vmssName_var')]",
      "location": "[parameters('location')]",
      "identity": {
        "type": "UserAssigned",
        "userAssignedIdentities": {
          "[format('{0}', resourceId('Microsoft.ManagedIdentity/userAssignedIdentities', variables('identityName_var')))]": {}
        }
      },
      "sku": {
        "name": "[parameters('vmSize')]",
        "capacity": "[parameters('instanceCount')]",
        "tier": "[parameters('vmssTier')]"
      },
      "properties": {
        "overprovision": true,
        "upgradePolicy": {
          "mode": "Manual"
        },
        "virtualMachineProfile": {
          "priority": "[parameters('vmssPriority')]",
          "evictionPolicy": "[if(equals(parameters('vmssPriority'), 'Regular'), json('null'), parameters('vmssEvictionPolicy'))]",
          "storageProfile": {
            "osDisk": {
              "managedDisk": {
                "storageAccountType": "[parameters('diskAccountType')]"
              },
              "diskSizeGB": "[parameters('osDiskSize')]",
              "createOption": "FromImage",
              "caching": "ReadWrite"
            },
            "imageReference": {
              "publisher": "[variables('imagePublisher')]",
              "offer": "[variables('imageOffer')]",
              "sku": "[variables('imageSku')]",
              "version": "latest"
            }
          },
          "osProfile": {
            "computerNamePrefix": "[variables('vmssName_var')]",
            "customData": "[if(equals(parameters('customDataUrl'), ''), json('null'), variables('customDataAdvanced'))]",
            "adminUsername": "[parameters('adminUsername')]",
            "linuxConfiguration": {
              "disablePasswordAuthentication": true,
              "ssh": {
                "publicKeys": [
                  {
                    "keyData": "[parameters('adminPasswordOrKey')]",
                    "path": "[format('/home/{0}/.ssh/authorized_keys', parameters('adminUsername'))]"
                  }
                ]
              }
            }
          },
          "networkProfile": {
            "networkInterfaceConfigurations": [
              {
                "name": "[variables('nicName')]",
                "properties": {
                  "primary": true,
                  "ipConfigurations": [
                    {
                      "name": "[variables('ipConfigName')]",
                      "properties": {
                        "subnet": {
                          "id": "[format('/subscriptions/{0}/resourceGroups/{1}/providers/Microsoft.Network/virtualNetworks/{2}/subnets/{3}', subscription().subscriptionId, resourceGroup().name, variables('virtualNetworkName_var'), variables('subnetName'))]"
                        },
                        "loadBalancerBackendAddressPools": [
                          {
                            "id": "[format('/subscriptions/{0}/resourceGroups/{1}/providers/Microsoft.Network/loadBalancers/{2}/backendAddressPools/{3}', subscription().subscriptionId, resourceGroup().name, variables('loadBalancerName'), variables('bePoolName'))]"
                          }
                        ],
                        "loadBalancerInboundNatPools": [
                          {
                            "id": "[format('/subscriptions/{0}/resourceGroups/{1}/providers/Microsoft.Network/loadBalancers/{2}/inboundNatPools/{3}', subscription().subscriptionId, resourceGroup().name, variables('loadBalancerName'), variables('natPoolName'))]"
                          }
                        ]
                      }
                    }
                  ]
                }
              }
            ]
          }
        }
      },
      "dependsOn": [
        "[resourceId('Microsoft.ManagedIdentity/userAssignedIdentities', variables('identityName_var'))]",
        "[resourceId('Microsoft.Network/loadBalancers', variables('loadBalancerName'))]",
        "[resourceId('Microsoft.Network/virtualNetworks', variables('virtualNetworkName_var'))]"
      ]
    }
  ],
  "outputs": {
    "fqdn": {
      "type": "string",
      "value": "[reference(resourceId('Microsoft.Network/publicIPAddresses', variables('publicIPAddressName_var'))).dnsSettings.fqdn]"
    }
  }
}