{
  "$schema": "https://schema.management.azure.com/schemas/2019-04-01/deploymentTemplate.json#",
  "contentVersion": "1.0.0.0",
  "metadata": {
    "_generator": {
      "name": "bicep",
      "version": "0.28.1.47646",
      "templateHash": "9575926172091705339"
    }
  },
  "parameters": {
    "vmssName": {
      "type": "string",
      "defaultValue": "vmss1",
      "metadata": {
        "description": "The name of your Virtual Machine."
      }
    },
    "vmSize": {
      "type": "string",
      "defaultValue": "Standard_B2s",
      "allowedValues": [
        "Standard_B1ls",
        "Standard_B1s",
        "Standard_B2s",
        "Standard_B1ms",
        "Standard_B2ms",
        "Standard_B4ms",
        "Standard_D2s_v5",
        "Standard_D4s_v5",
        "Standard_D2ps_v5",
        "Standard_D4ps_v5"
      ],
      "metadata": {
        "description": "The Virtual Machine size."
      }
    },
    "diskAccountType": {
      "type": "string",
      "defaultValue": "Premium_LRS",
      "allowedValues": [
        "Standard_LRS",
        "Premium_LRS",
        "UltraSSD_LRS"
      ],
      "metadata": {
        "description": "The Storage Account Type for OS and Data disks."
      }
    },
    "osDiskSize": {
      "type": "int",
      "defaultValue": 256,
      "allowedValues": [
        1024,
        512,
        256,
        128,
        64,
        32
      ],
      "metadata": {
        "description": "The OS Disk size."
      }
    },
    "osImage": {
      "type": "string",
      "defaultValue": "Ubuntu 20.04-LTS",
      "allowedValues": [
        "Ubuntu 20.04-LTS",
        "Ubuntu 20.04-LTS (arm64)",
        "mariner-gen2",
        "mariner-gen1",
        "mariner-arm"
      ],
      "metadata": {
        "description": "The OS image for the VM."
      }
    },
    "location": {
      "type": "string",
      "defaultValue": "[resourceGroup().location]",
      "metadata": {
        "description": "Location for all resources."
      }
    },
    "virtualNetworkName": {
      "type": "string",
      "defaultValue": "",
      "metadata": {
        "description": "Name of the VNET."
      }
    },
    "allowIpPort22": {
      "type": "string",
      "defaultValue": "127.0.0.1",
      "metadata": {
        "description": "Default IP to allow Port 22 (SSH). Set to your own IP Address"
      }
    },
    "adminUsername": {
      "type": "string",
      "defaultValue": "azureuser",
      "metadata": {
        "description": "Username for the Virtual Machine."
      }
    },
    "sshKey": {
      "type": "securestring",
      "defaultValue": "",
      "metadata": {
        "description": "SSH Key for the Virtual Machine."
      }
    },
    "customData": {
      "type": "string",
      "defaultValue": "none",
      "allowedValues": [
        "cloud-init-mariner",
        "none"
      ],
      "metadata": {
        "description": "Deploy with cloud-init."
      }
    },
    "env": {
      "type": "secureObject",
      "defaultValue": {},
      "metadata": {
        "description": "Environment variables as JSON object."
      }
    },
    "instanceCount": {
      "type": "int",
      "defaultValue": 1,
      "maxValue": 1000,
      "metadata": {
        "description": "Number of VM instances (1000 or less)."
      }
    },
    "vmssTier": {
      "type": "string",
      "defaultValue": "Standard",
      "allowedValues": [
        "Standard",
        "Basic"
      ],
      "metadata": {
        "description": "Tier"
      }
    },
    "vmssPriority": {
      "type": "string",
      "defaultValue": "Regular",
      "allowedValues": [
        "Regular",
        "Low",
        "Spot"
      ],
      "metadata": {
        "description": "Priority"
      }
    },
    "vmssEvictionPolicy": {
      "type": "string",
      "defaultValue": "Deallocate",
      "allowedValues": [
        "Deallocate",
        "Delete"
      ],
      "metadata": {
        "description": "Eviction Policy"
      }
    }
  },
  "variables": {
    "rand": "[substring(uniqueString(resourceGroup().id), 0, 6)]",
    "keyData": "[if(not(equals(parameters('sshKey'), '')), parameters('sshKey'), 'ssh-rsa AAAAB3NzaC1yc2EAAAADAQABAAABAQC3gkRpKwprN00sT7yekr0xO0F+uTllDua02puhu1v0zGu3aENvUsygBHJiTy+flgrO2q3mY9F5/D67+WHDeSpr5s71UtnbzMxTams89qmo+raTm+IqjzdNujaWf0/pbT6JUkQq0fR0BfIvg3/7NTXhlzjmCOP2EpD91LzN6b5jAm/5hXr0V5mcpERo8kk2GWxjKmwmDOV+huH1DIFDpMxT3WzR2qvZp1DZbNSYmKkrite3FHlPGLXA1I3bRQT+iTj8vRGpxOPSiMdPK4RNMEZVXSGQ3OZbSl2FBCbd/tdJ1idKo8/ZCkHxdh9/em28/yfPUK0D164shgiEdIkdOQJv')]",
    "resourceGroupName": "[resourceGroup().name]",
    "bePoolName": "[format('{0}-bepool', parameters('vmssName'))]",
    "frontEndIPConfigID": "[resourceId('Microsoft.Network/loadBalancers/frontendIpConfigurations', variables('loadBalancerName'), 'LoadBalancerFrontend')]",
    "ipConfigName": "[format('{0}-ipconfig', parameters('vmssName'))]",
    "loadBalancerName": "[format('{0}-lb', parameters('vmssName'))]",
    "natPoolName": "[format('{0}-natpool', parameters('vmssName'))]",
    "natBackendPort": 22,
    "natStartPort": 50000,
    "natEndPort": 50119,
    "nicName": "[format('{0}-nic', parameters('vmssName'))]",
    "publicIPAddressName": "[format('{0}-ip', parameters('vmssName'))]",
    "publicIPAddressType": "Static",
    "subnetName": "default",
    "addressPrefix": "10.1.0.0/16",
    "subnetAddressPrefix": "10.1.0.0/24",
    "vnetName": "[if(not(equals(parameters('virtualNetworkName'), '')), parameters('virtualNetworkName'), format('{0}-vnet', variables('resourceGroupName')))]",
    "nsgName": "[format('{0}-nsg', variables('resourceGroupName'))]",
    "customDataCloudInit": "#cloud-config\n# vim: syntax=yaml\n\nwrite_files:\n- path: /home/azureuser/env.json\n  content: {0}\n  encoding: b64\n\nruncmd:\n- cd /home/azureuser/\n- chown -R azureuser:azureuser /home/azureuser/\n- sudo tdnf install -y moby-engine moby-cli ca-certificates\n- sudo systemctl enable docker.service\n- sudo systemctl daemon-reload\n- sudo systemctl start docker.service\n- sudo -u azureuser echo $(date) > hello.txt\n",
    "customDataCloudInitFormat": "[format(variables('customDataCloudInit'), base64(string(parameters('env'))))]",
    "kvCustomData": {
      "none": null,
      "cloud-init-mariner": "[base64(variables('customDataCloudInitFormat'))]"
    },
    "kvImageReference": {
      "Ubuntu 20.04-LTS": {
        "publisher": "canonical",
        "offer": "0001-com-ubuntu-server-focal",
        "sku": "20_04-lts-gen2",
        "version": "latest"
      },
      "Ubuntu 18.04-LTS": {
        "publisher": "Canonical",
        "offer": "UbuntuServer",
        "sku": "18.04-LTS",
        "version": "latest"
      },
      "Ubuntu 20.04-LTS (arm64)": {
        "publisher": "canonical",
        "offer": "0001-com-ubuntu-server-focal",
        "sku": "20_04-lts-arm64",
        "version": "latest"
      },
      "mariner-gen1": {
        "publisher": "MicrosoftCBLMariner",
        "offer": "cbl-mariner",
        "sku": "cbl-mariner-2",
        "version": "latest"
      },
      "mariner-gen2": {
        "publisher": "MicrosoftCBLMariner",
        "offer": "cbl-mariner",
        "sku": "cbl-mariner-2-gen2",
        "version": "latest"
      },
      "mariner-arm": {
        "publisher": "MicrosoftCBLMariner",
        "offer": "cbl-mariner",
        "sku": "cbl-mariner-2-arm64",
        "version": "latest"
      }
    },
    "nsgSecurityRulesBase": [
      {
        "name": "Port_22",
        "properties": {
          "priority": 100,
          "protocol": "Tcp",
          "access": "Allow",
          "direction": "Inbound",
          "sourceAddressPrefix": "[parameters('allowIpPort22')]",
          "sourcePortRange": "*",
          "destinationAddressPrefix": "*",
          "destinationPortRange": "22"
        }
      },
      {
        "name": "Port_80",
        "properties": {
          "protocol": "*",
          "sourcePortRange": "*",
          "destinationPortRange": "80",
          "sourceAddressPrefix": "Internet",
          "destinationAddressPrefix": "*",
          "access": "Allow",
          "priority": 110,
          "direction": "Inbound"
        }
      },
      {
        "name": "Port_443",
        "properties": {
          "protocol": "*",
          "sourcePortRange": "*",
          "destinationPortRange": "443",
          "sourceAddressPrefix": "Internet",
          "destinationAddressPrefix": "*",
          "access": "Allow",
          "priority": 120,
          "direction": "Inbound"
        }
      },
      {
        "name": "Port_8080",
        "properties": {
          "protocol": "*",
          "sourcePortRange": "*",
          "destinationPortRange": "8080",
          "sourceAddressPrefix": "Internet",
          "destinationAddressPrefix": "*",
          "access": "Allow",
          "priority": 130,
          "direction": "Inbound"
        }
      },
      {
        "name": "Port_41641",
        "properties": {
          "protocol": "Udp",
          "sourcePortRange": "*",
          "destinationPortRange": "41641",
          "sourceAddressPrefix": "Internet",
          "destinationAddressPrefix": "*",
          "access": "Allow",
          "priority": 140,
          "direction": "Inbound"
        }
      }
    ],
    "nsgSecurityRules": "[variables('nsgSecurityRulesBase')]"
  },
  "resources": [
    {
      "type": "Microsoft.ManagedIdentity/userAssignedIdentities",
      "apiVersion": "2018-11-30",
      "name": "[format('{0}-identity', resourceGroup().name)]",
      "location": "[parameters('location')]"
    },
    {
      "type": "Microsoft.Network/publicIPAddresses",
      "apiVersion": "2020-05-01",
      "name": "[variables('publicIPAddressName')]",
      "location": "[parameters('location')]",
      "sku": {
        "name": "Standard"
      },
      "properties": {
        "publicIPAllocationMethod": "[variables('publicIPAddressType')]",
        "dnsSettings": {
          "domainNameLabel": "[toLower(format('{0}-{1}', parameters('vmssName'), variables('rand')))]"
        }
      }
    },
    {
      "type": "Microsoft.Network/virtualNetworks",
      "apiVersion": "2021-05-01",
      "name": "[variables('vnetName')]",
      "location": "[parameters('location')]",
      "properties": {
        "addressSpace": {
          "addressPrefixes": [
            "[variables('addressPrefix')]"
          ]
        },
        "subnets": [
          {
            "name": "[variables('subnetName')]",
            "properties": {
              "addressPrefix": "[variables('subnetAddressPrefix')]",
              "networkSecurityGroup": {
                "id": "[resourceId('Microsoft.Network/networkSecurityGroups', variables('nsgName'))]"
              },
              "privateEndpointNetworkPolicies": "Enabled",
              "privateLinkServiceNetworkPolicies": "Enabled"
            }
          },
          {
            "name": "AzureBastionSubnet",
            "properties": {
              "addressPrefix": "10.1.1.0/26",
              "privateEndpointNetworkPolicies": "Enabled",
              "privateLinkServiceNetworkPolicies": "Enabled"
            }
          }
        ]
      },
      "dependsOn": [
        "[resourceId('Microsoft.Network/networkSecurityGroups', variables('nsgName'))]"
      ]
    },
    {
      "type": "Microsoft.Network/networkSecurityGroups",
      "apiVersion": "2018-12-01",
      "name": "[variables('nsgName')]",
      "location": "[parameters('location')]",
      "properties": {
        "securityRules": "[variables('nsgSecurityRules')]"
      }
    },
    {
      "type": "Microsoft.Network/loadBalancers",
      "apiVersion": "2020-05-01",
      "name": "[variables('loadBalancerName')]",
      "location": "[parameters('location')]",
      "sku": {
        "name": "Standard"
      },
      "properties": {
        "frontendIPConfigurations": [
          {
            "name": "LoadBalancerFrontEnd",
            "properties": {
              "publicIPAddress": {
                "id": "[resourceId('Microsoft.Network/publicIPAddresses', variables('publicIPAddressName'))]"
              }
            }
          }
        ],
        "backendAddressPools": [
          {
            "name": "[variables('bePoolName')]"
          }
        ],
        "inboundNatPools": [
          {
            "name": "[variables('natPoolName')]",
            "properties": {
              "frontendIPConfiguration": {
                "id": "[variables('frontEndIPConfigID')]"
              },
              "protocol": "Tcp",
              "frontendPortRangeStart": "[variables('natStartPort')]",
              "frontendPortRangeEnd": "[variables('natEndPort')]",
              "backendPort": "[variables('natBackendPort')]"
            }
          }
        ],
        "loadBalancingRules": [
          {
            "name": "Rule_80",
            "properties": {
              "loadDistribution": "Default",
              "frontendIPConfiguration": {
                "id": "[variables('frontEndIPConfigID')]"
              },
              "backendAddressPool": {
                "id": "[format('/subscriptions/{0}/resourceGroups/{1}/providers/Microsoft.Network/loadBalancers/{2}/backendAddressPools/{3}', subscription().subscriptionId, resourceGroup().name, variables('loadBalancerName'), variables('bePoolName'))]"
              },
              "protocol": "Tcp",
              "frontendPort": 80,
              "backendPort": 80,
              "enableFloatingIP": false,
              "idleTimeoutInMinutes": 5,
              "probe": {
                "id": "[resourceId('Microsoft.Network/loadBalancers/probes', variables('loadBalancerName'), 'Probe_80')]"
              }
            }
          },
          {
            "name": "Rule_443",
            "properties": {
              "loadDistribution": "Default",
              "frontendIPConfiguration": {
                "id": "[variables('frontEndIPConfigID')]"
              },
              "backendAddressPool": {
                "id": "[format('/subscriptions/{0}/resourceGroups/{1}/providers/Microsoft.Network/loadBalancers/{2}/backendAddressPools/{3}', subscription().subscriptionId, resourceGroup().name, variables('loadBalancerName'), variables('bePoolName'))]"
              },
              "protocol": "Tcp",
              "frontendPort": 443,
              "backendPort": 443,
              "enableFloatingIP": false,
              "idleTimeoutInMinutes": 5,
              "probe": {
                "id": "[resourceId('Microsoft.Network/loadBalancers/probes', variables('loadBalancerName'), 'Probe_443')]"
              }
            }
          }
        ],
        "probes": [
          {
            "name": "Probe_80",
            "properties": {
              "protocol": "Tcp",
              "port": 80,
              "intervalInSeconds": 5,
              "numberOfProbes": 2
            }
          },
          {
            "name": "Probe_443",
            "properties": {
              "protocol": "Tcp",
              "port": 443,
              "intervalInSeconds": 5,
              "numberOfProbes": 2
            }
          }
        ]
      },
      "dependsOn": [
        "[resourceId('Microsoft.Network/publicIPAddresses', variables('publicIPAddressName'))]"
      ]
    },
    {
      "type": "Microsoft.Compute/virtualMachineScaleSets",
      "apiVersion": "2019-12-01",
      "name": "[parameters('vmssName')]",
      "location": "[parameters('location')]",
      "identity": {
        "type": "UserAssigned",
        "userAssignedIdentities": {
          "[format('{0}', resourceId('Microsoft.ManagedIdentity/userAssignedIdentities', format('{0}-identity', resourceGroup().name)))]": {}
        }
      },
      "sku": {
        "name": "[parameters('vmSize')]",
        "capacity": "[parameters('instanceCount')]",
        "tier": "[parameters('vmssTier')]"
      },
      "properties": {
        "overprovision": true,
        "upgradePolicy": {
          "mode": "Manual"
        },
        "virtualMachineProfile": {
          "priority": "[parameters('vmssPriority')]",
          "evictionPolicy": "[if(equals(parameters('vmssPriority'), 'Regular'), null(), parameters('vmssEvictionPolicy'))]",
          "storageProfile": {
            "osDisk": {
              "managedDisk": {
                "storageAccountType": "[parameters('diskAccountType')]"
              },
              "diskSizeGB": "[parameters('osDiskSize')]",
              "createOption": "FromImage",
              "caching": "ReadWrite"
            },
            "imageReference": "[variables('kvImageReference')[parameters('osImage')]]"
          },
          "osProfile": {
            "computerNamePrefix": "[parameters('vmssName')]",
            "customData": "[variables('kvCustomData')[parameters('customData')]]",
            "adminUsername": "[parameters('adminUsername')]",
            "linuxConfiguration": {
              "disablePasswordAuthentication": true,
              "ssh": {
                "publicKeys": [
                  {
                    "keyData": "[variables('keyData')]",
                    "path": "[format('/home/{0}/.ssh/authorized_keys', parameters('adminUsername'))]"
                  }
                ]
              }
            }
          },
          "networkProfile": {
            "networkInterfaceConfigurations": [
              {
                "name": "[variables('nicName')]",
                "properties": {
                  "primary": true,
                  "ipConfigurations": [
                    {
                      "name": "[variables('ipConfigName')]",
                      "properties": {
                        "subnet": {
                          "id": "[format('/subscriptions/{0}/resourceGroups/{1}/providers/Microsoft.Network/virtualNetworks/{2}/subnets/{3}', subscription().subscriptionId, resourceGroup().name, variables('vnetName'), variables('subnetName'))]"
                        },
                        "loadBalancerBackendAddressPools": [
                          {
                            "id": "[format('/subscriptions/{0}/resourceGroups/{1}/providers/Microsoft.Network/loadBalancers/{2}/backendAddressPools/{3}', subscription().subscriptionId, resourceGroup().name, variables('loadBalancerName'), variables('bePoolName'))]"
                          }
                        ],
                        "loadBalancerInboundNatPools": [
                          {
                            "id": "[format('/subscriptions/{0}/resourceGroups/{1}/providers/Microsoft.Network/loadBalancers/{2}/inboundNatPools/{3}', subscription().subscriptionId, resourceGroup().name, variables('loadBalancerName'), variables('natPoolName'))]"
                          }
                        ]
                      }
                    }
                  ]
                }
              }
            ]
          }
        }
      },
      "dependsOn": [
        "[resourceId('Microsoft.ManagedIdentity/userAssignedIdentities', format('{0}-identity', resourceGroup().name))]",
        "[resourceId('Microsoft.Network/loadBalancers', variables('loadBalancerName'))]",
        "[resourceId('Microsoft.Network/virtualNetworks', variables('vnetName'))]"
      ]
    }
  ],
  "outputs": {
    "adminUsername": {
      "type": "string",
      "value": "[parameters('adminUsername')]"
    },
    "fqdn": {
      "type": "string",
      "value": "[reference(resourceId('Microsoft.Network/publicIPAddresses', variables('publicIPAddressName')), '2020-05-01').dnsSettings.fqdn]"
    }
  }
}